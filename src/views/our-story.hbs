{{!-- <section class="hero-container">
    <span id="our-story-hero" class="hero">
    </span>
    <div class="hero-content">
        <p class="small-text">Upcoming Events</p>
        <p class="main-text">Find all my publications and<br>recordings here</p>
    </div>
</section> --}}

<div class="content content--active" tabindex="0" role="tabpanel" id="book" aria-labelledby="book-tab">
  <form action="/" method="POST" id="storiesForm">
    <div class="mdc-layout-grid">
      <div id="announcement" class="mdc-layout-grid__inner">

        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
          <p class="header">Share your story with us</p>

          <p class="our-story-description">To All The Places Iâ€™ve Had Sex Before is a set of personal narrative essays
            that explore the true meaning of
            sexual liberation for LAUX the author. But there are countless other stories that need to be told, share
            your journey towards sexual
            liberation and acceptance.</p>
        </div>
      </div>

      <div id="map-and-stories" class="mdc-layout-grid__inner">
        <div
          class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone"
          id="map-container">
          <object onload="objectOnClick('{{countryCode}}', {{stringify storiesSummary}} );" type="image/svg+xml"
            data="../../images/world.svg" id="map">
            World Map
            <!-- fallback image in CSS -->
          </object>

          <div id="zoom-control" class="mdc-card mdc-elevation--z1">
            <i id="zoom-in" class="btn mdc-icon-button material-icons">zoom_in</i>
            <hr class="mdc-list-divider">
            <i id="zoom-out" class="btn mdc-icon-button material-icons">zoom_out</i>
          </div>

          {{!-- <div id="pan-control" class="mdc-card mdc-elevation--z1">
            <i id="pan" class="btn mdc-icon-button material-icons">pan_tool</i>
          </div> --}}

          <div class="tooltip"></div>
        </div>
        <div id="previous-stories-container"
          class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-desktop mdc-layout-grid__cell mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell mdc-layout-grid__cell--span-4-phone">

          <div id="previous-stories-progress" role="progressbar"
            class="mdc-linear-progress mdc-linear-progress--indeterminate mdc-linear-progress--closed"
            aria-label="Example Progress Bar" aria-valuemin="0" aria-valuemax="1"
            data-mdc-auto-init="MDCLinearProgress">
            <div class="mdc-linear-progress__buffer">
              <div class="mdc-linear-progress__buffer-bar"></div>
              <div class="mdc-linear-progress__buffer-dots"></div>
            </div>
            <div class="mdc-linear-progress__bar mdc-linear-progress__primary-bar">
              <span class="mdc-linear-progress__bar-inner"></span>
            </div>
            <div class="mdc-linear-progress__bar mdc-linear-progress__secondary-bar">
              <span class="mdc-linear-progress__bar-inner"></span>
            </div>
          </div>

          <div id="previous-stories">
            {{#each stories}}
            <div class="mdc-card">
              <div class="story-card-content">
                <div class="location">{{cityState}}</div>
                <div class="story">{{{story}}}</div>
                <div class="submitted-by">Submitted by Anonymous</div>
                <div class="timestamp">{{timestamp}}</div>
              </div>
            </div>
            {{/each}}
          </div>

        </div>
      </div>

      <div class="input-form-container">
        <h3 style="margin-left:1em;">Tell us your story...</h3>

        <div id="input-form" class="mdc-layout-grid__inner">
          <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-desktop mdc-layout-grid__cell--span-5-tablet">

            <label id="story-container"
              class="mdc-text-field mdc-text-field--textarea mdc-text-field--fullwidth mdc-text-field--no-label"
              data-mdc-auto-init="MDCTextField">
              <textarea id="story" name="story" class="mdc-theme--surface mdc-text-field__input form-input" rows="3"
                cols="40" aria-label="Label"></textarea>
              <span class="mdc-notched-outline">
                <span class="mdc-notched-outline__leading"></span>
                <span class="mdc-notched-outline__trailing"></span>
              </span>
            </label>

          </div>
          <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-3-desktop mdc-layout-grid__cell--span-2-tablet"
            id="geography">

            <div id="countrySelect" class="mdc-select" data-mdc-auto-init="MDCSelect">
              <div class="mdc-select__anchor demo-width-class">
                <span class="mdc-select__ripple"></span>
                <input id="country" name="country" type="text" readonly class="mdc-select__selected-text form-input">
                <i class="mdc-select__dropdown-icon"></i>
                <span class="mdc-floating-label">In what country?</span>
                <span class="mdc-line-ripple"></span>
              </div>

              <div id="countrySelectMenu" class="mdc-select__menu mdc-menu mdc-menu-surface demo-width-class">
                <ul class="mdc-list">
                  <li class="mdc-list-item mdc-list-item--selected" data-value="" aria-selected="true"></li>
                  {{#each countries}}
                  <li class="mdc-list-item" data-value="{{@key}}">
                    <span class="mdc-list-item__text">
                      {{this}}
                    </span>
                  </li>
                  {{/each}}
                </ul>
              </div>
            </div>

            <label id="cityStateLabel" class="mdc-text-field mdc-text-field--filled" data-mdc-auto-init="MDCTextField">
              <span class="mdc-text-field__ripple"></span>
              <input id="cityState" name="cityState" class="mdc-text-field__input form-input" type="text"
                aria-labelledby="my-label-id">
              <span class="mdc-floating-label" id="my-label-id">In what city/state?</span>
              <span class="mdc-line-ripple"></span>
            </label>

          </div>

          <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-1 mdc-layout-grid__cell--span-4-phone"
            id="submit">

            <div class="mdc-snackbar mdc-snackbar--story" data-mdc-auto-init="MDCSnackbar">
              <div class="mdc-snackbar__surface">
                <div class="mdc-snackbar__label" role="status" aria-live="polite">
                  Thank you for sharing your story. Before appearing on the website, your submission will be reviewed by
                  a
                  member of our team to ensure this remains a safe space for all.
                </div>
                <div class="mdc-snackbar__actions">
                  <button title="Dismiss" class="mdc-icon-button mdc-snackbar__dismiss material-icons">
                    close
                  </button>
                </div>
              </div>
            </div>

            <button disabled id="btn" style="width:100%" type="submit"
              class="mdc-button-submit mdc-button mdc-button--raised" data-mdc-auto-init="MDCRipple">
              <div class="mdc-button__ripple"></div>
              <span class="mdc-button__label">Submit</span>
            </button>

          </div>
        </div>
      </div>
    </div>
  </form>
</div>

<script>

  var url = 'https://script.google.com/macros/s/AKfycbygYiSXlhf4EtyPgYTKoW1atdOL0hZueTAP1jgPaQlYmRYFoNaU/exec';
  var svgObj = document.getElementById("svg2");
  var svgjObj = $("object").contents().find("svg");


  //var hammertime = new Hammer(svgObj);
  //var hammertime = new Hammer.Manager(svgObj);
  //var pinch = new Hammer.Pinch();

  //hammertime.add([pinch]);

  //hammertime.on("pinch", function(ev) {
  //  console.log(ev);
  //});

  function objectOnClick(initCountryCode, storiesSummaryObj) {
    var hammertime = $("object").contents().find("svg").hammer();

    // $("object").contents().find("svg").hammer().on("panleft panright tap press", function(event) {
    //callback
    //  console.log(event.type);
    //});

    $("object").contents().find('#' + initCountryCode).addClass('clicked');

    if (storiesSummaryObj) {
      $("object").contents().find("path").each(function (ix, el) {
        var currId = $(this).attr('id');

        if (storiesSummaryObj[currId]) {
          $(this).toggleClass('default country', true);
        }
      });
    }

    $("object").contents().find(".default:not(.clicked)").click(function (e) {
      var countryCode = $(this).attr('id');
      var classStr = $(this).attr('class');
      var isClicked = /clicked/.test(classStr);

      $("object").contents().find("path").removeClass("clicked");
      if (!isClicked) $(this).addClass("clicked");

      $("#previous-stories-progress").toggleClass('mdc-linear-progress--closed', false);
      $.get(url + '?stories=true&countries=false&countryCode=' + countryCode, function (data) {
        //console.log(data);
        var html = data.stories.reduce(function (prev, curr) {
          prev += '<div class="mdc-card">' +
            '<div class="story-card-content">' +
            '<div class="location">' + curr.cityState + '</div> ' +
            '<div class="story">' + curr.story + '</div>' +
            '<div class="submitted-by">Submitted by Anonymous on ' + '</div' +
            '<div class="timestamp">' + curr.timestamp + '</div>' +
            '</div>' + '</div>';
          //console.log(curr.timestamp);
          return prev;
        }, '');

        $('#previous-stories').html(html);
        $("#previous-stories-progress").toggleClass('mdc-linear-progress--closed', true);
      });
    });

    $("object").contents().find(".default").hover(function () {

      $(".tooltip").addClass('active');
      $(".tooltip").html($(this).attr('data-name'));
    }, function () {
      $(".tooltip").removeClass('active');
    });

    const getMousePos = function (evt) {
      const pos = evt.currentTarget.getBoundingClientRect();
      return {
        x: evt.clientX - pos.left,
        y: evt.clientY - pos.top
      };
    };

    //https://stackoverflow.com/questions/3234256/find-mouse-position-relative-to-element
    $("object").contents().find("path").on('mousemove', function (e) {

      var tabbar = $('.mdc-tab-bar').height();
      var announcement = $('#announcement').outerHeight(true);
      var tooltip = $(".tooltip").outerHeight(true);
      var leftMargin = ($("#map-and-stories").outerWidth(true) - $("#map-and-stories").width()) / 2;
      var svg = ($("#map-container").width() - $("object").contents().find("svg").width()) / 2;

      $(".tooltip").css({
        left: e.pageX + leftMargin + svg,
        top: e.pageY + tabbar + announcement - tooltip - 10
      });
    });

    //https://stackoverflow.com/questions/52576376/how-to-zoom-in-on-a-complex-svg-structure
    const svgImage = $("object").contents().find("svg")[0];
    var viewBox = { x: 0, y: 0, w: 2000, h: 1001 };
    svgImage.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`);
    const svgSize = { w: svgImage.clientWidth, h: svgImage.clientHeight };
    var isPanning = false;
    var startPoint = { x: 0, y: 0 };
    var endPoint = { x: 0, y: 0 };;
    var scale = 1;

    /*function wheelHandler(e, sign) {
      var step = e.type == 'pinch' ? 0.02 : 0.05;
      e.preventDefault();

      if (e.type == 'click' || e.type == 'mousedown') {
        e.deltaY = 100 * sign;
      }

      if (e.type == 'pinch') {
        e.offsetX = e.center.x;
        e.offsetY = e.center.y;
        e.deltaY = e.additionalEvent == 'pinchin' ? 1 : -1;
      }

      var w = viewBox.w;
      var h = viewBox.h;
      var mx = e.offsetX;//mouse x  
      var my = e.offsetY;
      var dw = w * Math.sign(e.deltaY) * step;
      var dh = h * Math.sign(e.deltaY) * step;
      var dx = dw * mx / svgSize.w;
      var dy = dh * my / svgSize.h;
      viewBox = { x: viewBox.x + dx, y: viewBox.y + dy, w: viewBox.w - dw, h: viewBox.h - dh };
      scale = svgSize.w / viewBox.w;
      //zoomValue.innerText = `${Math.round(scale*100)/100}`;
      svgImage.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`);
    }*/

    /*$("#zoom-in").click(function (e) {
      var sign = 1;
      wheelHandler(e, sign);
    });

    $("#zoom-out").click(function (e) {
      var sign = -1;
      wheelHandler(e, sign);
    });*/

    //Unable to use jQuery because cannot force active listening
    //$("object").contents().find("svg")[0].addEventListener('wheel', wheelHandler, { passive: false });

    /*var el = document.querySelector("object").contentDocument.getElementById("svg2");
    var ham = new Hammer(el, {domEvents: true});
    
    ham.get('pinch').set({enable:true});

    ham.on('pinch', wheelHandler);

    svgImage.onmousedown = function (e) {
      isPanning = true;
      startPoint = { x: e.x, y: e.y };
    }

    hammertime.on("touchstart", function(e) {
      var touches = e.touches;
      var firstTouch = touches[0];
      //console.log(e.type);
      //console.log(e);
      isPanning = true;
      //startPoint = { x: e.gesture.center.x, y: e.gesture.center.y };
      startPoint = { x: firstTouch.pageX, y: firstTouch.pageY };
    });

    svgImage.onmousemove = function (e) {
      if (isPanning) {
        endPoint = { x: e.x, y: e.y };
        var dx = (startPoint.x - endPoint.x) / scale;
        var dy = (startPoint.y - endPoint.y) / scale;
        var movedViewBox = { x: viewBox.x + dx, y: viewBox.y + dy, w: viewBox.w, h: viewBox.h };
        svgImage.setAttribute('viewBox', `${movedViewBox.x} ${movedViewBox.y} ${movedViewBox.w} ${movedViewBox.h}`);
      }
    }

    hammertime.on("touchmove", function(e) {
      var touches = e.touches;
      var firstTouch = touches[0];
      //console.log(event.type);
      if (isPanning) {
        endPoint = { x: firstTouch.pageX, y: firstTouch.pageY };
        var dx = (startPoint.x - endPoint.x) / scale;
        var dy = (startPoint.y - endPoint.y) / scale;
        var movedViewBox = { x: viewBox.x + dx, y: viewBox.y + dy, w: viewBox.w, h: viewBox.h };
        svgImage.setAttribute('viewBox', `${movedViewBox.x} ${movedViewBox.y} ${movedViewBox.w} ${movedViewBox.h}`);
      }
    });

    svgImage.onmouseup = function (e) {
      if (isPanning) {
        endPoint = { x: e.x, y: e.y };
        var dx = (startPoint.x - endPoint.x) / scale;
        var dy = (startPoint.y - endPoint.y) / scale;
        viewBox = { x: viewBox.x + dx, y: viewBox.y + dy, w: viewBox.w, h: viewBox.h };
        svgImage.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`);
        isPanning = false;
      }
    }

    hammertime.on("touchend", function(e) {
      var touches = e.changedTouches;
      var firstTouch = touches[0];
      //console.log(event);
      //console.log(event.type);
      if (isPanning) {
        endPoint = { x: firstTouch.pageX, y: firstTouch.pageY };
        var dx = (startPoint.x - endPoint.x) / scale;
        var dy = (startPoint.y - endPoint.y) / scale;
        viewBox = { x: viewBox.x + dx, y: viewBox.y + dy, w: viewBox.w, h: viewBox.h };
        svgImage.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`);
        isPanning = false;
      }
    });

    svgImage.onmouseleave = function (e) {
      isPanning = false;
    }*/
    //resize();

    var eventsHandler;

    eventsHandler = {
      haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel']
      , init: function (options) {
        var instance = options.instance
          , initialScale = 1
          , pannedX = 0
          , pannedY = 0

        // Init Hammer
        // Listen only for pointer and touch events
        this.hammer = Hammer(options.svgElement, {
          inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput
        })

        // Enable pinch
        this.hammer.get('pinch').set({ enable: true })

        // Handle double tap
        this.hammer.on('doubletap', function (ev) {
          instance.zoomIn()
        })

        // Handle pan
        this.hammer.on('panstart panmove', function (ev) {
          // On pan start reset panned variables
          if (ev.type === 'panstart') {
            pannedX = 0
            pannedY = 0
          }

          // Pan only the difference
          instance.panBy({ x: ev.deltaX - pannedX, y: ev.deltaY - pannedY })
          pannedX = ev.deltaX
          pannedY = ev.deltaY
        })

        // Handle pinch
        this.hammer.on('pinchstart pinchmove', function (ev) {
          // On pinch start remember initial zoom
          if (ev.type === 'pinchstart') {
            initialScale = instance.getZoom()
            instance.zoomAtPoint(initialScale * ev.scale, { x: ev.center.x, y: ev.center.y })
          }

          instance.zoomAtPoint(initialScale * ev.scale, { x: ev.center.x, y: ev.center.y })
        })

        // Prevent moving the page on some devices when panning over SVG
        options.svgElement.addEventListener('touchmove', function (e) { e.preventDefault(); });
      }

      , destroy: function () {
        this.hammer.destroy()
      }
    }

    // Expose to window namespace for testing purposes
    window.panZoom = svgPanZoom(svgImage, {
      zoomEnabled: true
      , controlIconsEnabled: false
      , fit: 1
      , center: 1
      , customEventsHandler: eventsHandler
    });

    $("#zoom-in").click(function (e) {
      e.preventDefault();

      window.panZoom.zoomIn();
    });

    $("#zoom-out").click(function (e) {
      e.preventDefault();

      window.panZoom.zoomOut();
    });

  };

</script>